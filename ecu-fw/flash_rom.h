/*
 * MIT License
 *
 * Copyright (c) 2019 LandF Corporation
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

//________________________________________________________________________________________
//
//	RX63N	プログラムROMエリア書き換え
//
//----------------------------------------------------------------------------------------
//	開発履歴
//
//	2017/02/10	コーディング開始（橘）
//
//----------------------------------------------------------------------------------------
//	T.Tachibana
//	㈱L&F
//________________________________________________________________________________________
//

//#include "flash_rom.h"

#ifndef	__RX631_FLASH_ROM__
#define	__RX631_FLASH_ROM__

/*
	ROMブロック構造(2MByte)

	Block
	69		FFE0 0000	64K		領域3	大データ領域1
	68		FFE1 0000	64K		領域3	512K
	67		FFE2 0000	64K		領域3
	66		FFE3 0000	64K		領域3
	65		FFE4 0000	64K		領域3
	64		FFE5 0000	64K		領域3
	63		FFE6 0000	64K		領域3
	62		FFE7 0000	64K		領域3
	
	61		FFE8 0000	64K		領域2	大データ領域2
	60		FFE9 0000	64K		領域2	512K
	59		FFEA 0000	64K		領域2
	58		FFEB 0000	64K		領域2
	57		FFEC 0000	64K		領域2
	56		FFED 0000	64K		領域2
	55		FFEE 0000	64K		領域2
	54		FFEF 0000	64K		領域2

	53		FFF0 0000	32K		領域1	アプリケーション領域1
	52		FFF0 8000	32K		領域1	256K
	51		FFF1 0000	32K		領域1
	50		FFF1 8000	32K		領域1
	49		FFF2 0000	32K		領域1
	48		FFF2 8000	32K		領域1
	47		FFF3 0000	32K		領域1
	46		FFF3 8000	32K		領域1

	45		FFF4 0000	32K		領域1	アプリケーション領域2
	44		FFF4 8000	32K		領域1	256K
	43		FFF5 0000	32K		領域1
	42		FFF5 8000	32K		領域1
	41		FFF6 0000	32K		領域1
	40		FFF6 8000	32K		領域1
	39		FFF7 0000	32K		領域1
	38		FFF7 8000	32K		領域1

	37..8	FFF8 0000	16K*30	領域0	リモートモニタ＋ブートローダ
	7..0	FFFF 8000	4K*8	領域0	512K

	アクセス手順
	①	reset_fcu();			FCUリセット
	②	flash_init();			FCUイニシャライズ
	③	flash_get_block_info();	書き込むROMのブロック情報を得る
	④	flash_erase_rom();		ブロック消去(ブロックサイズ)
	⑤	flash_write_rom();		書き込み(128byte単位)
	⑥	継続なら③
	⑦	終了
*/

//	ポインタ変換
typedef	union	__pointer_union__	{
	void			*vp;
	unsigned long	*lp;
	unsigned short	*wp;
	unsigned char	*bp;
	unsigned long	val;
}	MIX_POINTER;

//________________________________________________________________________________________
//
//	ブロック情報取得
//----------------------------------------------------------------------------------------
//  機能説明
//		ROMブロック情報取得
//	引数
//		addr		対象アドレス
//		*start		開始番地保存先
//		*end		終了番地保存先
//		*area_no	エリア番号保存先
//		*block_no	ブロック番号保存先
//	戻り
//		int			0:正常 / 他:エラー
//________________________________________________________________________________________
//
int	flash_get_block_info(unsigned long addr, unsigned long *start, unsigned long *end, int *area_no, int *block_no);

//________________________________________________________________________________________
//
//	FCUモジュール初期化
//----------------------------------------------------------------------------------------
//  機能説明
//		FCUの初期化
//	引数
//		無し
//	戻り
//		無し
//________________________________________________________________________________________
//
void	reset_fcu(void);

//________________________________________________________________________________________
//
//	FCUモジュールステータスチェック
//----------------------------------------------------------------------------------------
//  機能説明
//		FCUの状態確認
//	引数
//		peaddr		P/Eアドレス
//	戻り
//		int			0:正常 / 他:エラー
//________________________________________________________________________________________
//
int	check_fstatr(unsigned long peaddr);

//________________________________________________________________________________________
//
//	FCUモジュール許可待ち
//----------------------------------------------------------------------------------------
//  機能説明
//		FCUの処理待ち
//	引数
//		timeout		最長待ち時間
//	戻り
//		int			0:正常 / 他:エラー
//________________________________________________________________________________________
//
int	wait_frdy(unsigned long timeout);

//________________________________________________________________________________________
//
//	FCUモジュールをリードモードへ移行する
//----------------------------------------------------------------------------------------
//	引数
//		*peaddr		P/Eアドレス
//	戻り
//		int			0:正常 / 他:エラー
//________________________________________________________________________________________
//
int	switch_to_read(unsigned long peaddr);

//________________________________________________________________________________________
//
//	FCUモジュールのクロック設定
//----------------------------------------------------------------------------------------
//	引数
//		*peaddr		P/Eアドレス
//	戻り
//		int			0:正常 / 他:エラー
//________________________________________________________________________________________
//
int	notify_fclk(unsigned long peaddr);

//________________________________________________________________________________________
//
//	FCUモジュールをP/Eモードへ移行する
//----------------------------------------------------------------------------------------
//	引数
//		*peaddr		P/Eアドレス
//	戻り
//		int			0:正常 / 他:エラー
//________________________________________________________________________________________
//
int	switch_to_pe(unsigned long peaddr);

//________________________________________________________________________________________
//
//	イニシャライズ
//----------------------------------------------------------------------------------------
//	引数
//		無し
//	戻り
//		無し
//________________________________________________________________________________________
//
void	flash_init(void);

//________________________________________________________________________________________
//
//	書き込み
//----------------------------------------------------------------------------------------
//	引数
//		dst			書き込み先ROMアドレス
//		src			読み出し元RAMアドレス
//		len			書込みバイト数
//	戻り
//		int			0:正常 / 他:エラー
//________________________________________________________________________________________
//
int	flash_write_rom(unsigned long dst, const unsigned long src, int len);

//________________________________________________________________________________________
//
//	ブロック消去
//----------------------------------------------------------------------------------------
//	引数
//		dst			消去アドレス
//	戻り
//		int			0:正常 / 他:エラー
//________________________________________________________________________________________
//
int	flash_erase_rom(unsigned long dst);

#endif	/*__RX631_FLASH_ROM__*/

